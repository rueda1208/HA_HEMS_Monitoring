# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

# Configuration for telegraf agent
[agent]
  log_level = "debug"
  ## Default data collection interval for all inputs
  interval = "1s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Collection offset is used to shift the collection by the given amount.
  ## This can be be used to avoid many plugins querying constraint devices
  ## at the same time by manually scheduling them in time.
  # collection_offset = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "1s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Collected metrics are rounded to the precision specified. Precision is
  ## specified as an interval with an integer + unit (e.g. 0s, 10ms, 2us, 4s).
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  ##
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s:
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ##
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  precision = "0s"

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0h"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

  ## Method of translating SNMP objects. Can be "netsnmp" which
  ## translates by calling external programs snmptranslate and snmptable,
  ## or "gosmi" which translates using the built-in gosmi library.
  # snmp_translator = "netsnmp"

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB 2.0
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  ## urls = ["http://127.0.0.1:8086"]
  # urls = ["http://192.168.11.11:8086"]
  urls = ["http://127.0.0.1:8086"]

  ## Token for authentication.
  token = "KrUZPCqJcuNmvbQtfL8TL_ZULcFT0mjGHOLQ4v1ZLNjXaKtq3Pgbke7wpUVjU-j_RnLtOLP_teU1NAG_OUTDnA=="

  ## Organization is the name of the organization you wish to write to.
  organization = "LTE"

  ## Destination bucket to write into.
  bucket = "MEEB1"

# Configuration for sending metrics to InfluxDB 2.0
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  ## urls = ["http://127.0.0.1:8086"]
  # urls = ["http://192.168.11.11:8086"]
  urls = ["https://influx.osed.cloud.lirei.io"]

  ## Token for authentication.
  token = "9THH2gWkIBMDGr0bGidaziv5AJ4EBc24G4Rm1rDCpx67ybjr0zuijXZb6tmHWQO5TIz4-Xvs59jgr2Nb_yo1FA=="

  ## Organization is the name of the organization you wish to write to.
  organization = "poctes"

  ## Destination bucket to write into.
  bucket = "MEEB1"

# Configuration for MQTT server to send metrics to
# [[outputs.mqtt]]
#   ## MQTT Brokers
#   ## The list of brokers should only include the hostname or IP address and the
#   ## port to the broker. This should follow the format '{host}:{port}'. For
#   ## example, "localhost:1883" or "127.0.0.1:8883".
#   servers = ["127.0.0.1:1883"]
#   data_format = "json"
#   keep_alive = 0
#   retain = true

# Configuration for MQTT server to send metrics to
[[outputs.mqtt]]
  ## MQTT Brokers
  ## The list of brokers should only include the hostname or IP address and the
  ## port to the broker. This should follow the format `[{scheme}://]{host}:{port}`. For
  ## example, `localhost:1883` or `mqtt://localhost:1883`.
  ## Scheme can be any of the following: tcp://, mqtt://, tls://, mqtts://
  ## non-TLS and TLS servers can not be mix-and-matched.
  # servers = ["192.168.11.11:1883", ] # or ["mqtts://tls.example.com:1883"]
  servers = ["127.0.0.1:1883", ] # or ["mqtts://tls.example.com:1883"]

  ## Protocol can be `3.1.1` or `5`. Default is `3.1.1`
  # protocol = "3.1.1"

  ## MQTT Topic for Producer Messages
  ## MQTT outputs send metrics to this topic format:
  ## {{ .TopicPrefix }}/{{ .Hostname }}/{{ .PluginName }}/{{ .Tag "tag_key" }}
  ## (e.g. prefix/web01.example.com/mem/some_tag_value)
  ## Each path segment accepts either a template placeholder, an environment variable, or a tag key
  ## of the form `{{.Tag "tag_key_name"}}`. Empty path elements as well as special MQTT characters
  ## (such as `+` or `#`) are invalid to form the topic name and will lead to an error.
  ## In case a tag is missing in the metric, that path segment omitted for the final topic.
  topic = "telegraf"

  ## QoS policy for messages
  ## The mqtt QoS policy for sending messages.
  ## See https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.dev.doc/q029090_.htm
  ##   0 = at most once
  ##   1 = at least once
  ##   2 = exactly once
  # qos = 2

   ## username and password to connect MQTT server.
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
  data_format = "json"

[[outputs.postgresql]]
  ## specify address via a url matching:
  ##   postgres://[pqgotest[:password]]@localhost[/dbname]\
  ##       ?sslmode=[disable|verify-ca|verify-full]
  ## or a simple string:
  ##   host=localhost user=pqotest password=... sslmode=... dbname=app_production
  ##
  ## All connection parameters are optional. Also supported are PG environment vars
  ## e.g. PGPASSWORD, PGHOST, PGUSER, PGDATABASE
  ## all supported vars here: https://www.postgresql.org/docs/current/libpq-envars.html
  ##
  ## Without the dbname parameter, the driver will default to a database
  ## with the same name as the user. This dbname is just for instantiating a
  ## connection with the server and doesn't restrict the databases we are trying
  ## to grab metrics for.
  ##
  connection = "host=localhost user=admin password=adminadmin sslmode=disable dbname=meeb1"

  ## Store tags as foreign keys in the metrics table. Default is false.
  # tags_as_foreignkeys = false

  ## Template to use for generating tables
  ## Available Variables:
  ##   {TABLE} - tablename as identifier
  ##   {TABLELITERAL} - tablename as string literal
  ##   {COLUMNS} - column definitions
  ##   {KEY_COLUMNS} - comma-separated list of key columns (time + tags)
  ## Default template
  # table_template = "CREATE TABLE IF NOT EXISTS {TABLE}({COLUMNS})"
  ## Example for timescaledb
  # table_template = "CREATE TABLE {TABLE}({COLUMNS}); SELECT create_hypertable({TABLELITERAL},'time');"

  ## Schema to create the tables into
  # schema = "public"

  ## Use jsonb datatype for tags
  # tags_as_jsonb = false
  ## Use jsonb datatype for fields
  # fields_as_jsonb = false

###############################################################################
#                            PROCESSOR PLUGINS                                #
###############################################################################
[[processors.http_processor]]  # Your custom processor
[[processors.modbus_processor]]  # Your custom processor

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
# # Read formatted metrics from one or more HTTP endpoints
# [[inputs.http]]
#   ## One or more URLs from which to read formatted metrics
#   urls = [
#     "http://127.0.0.1:8500/measurements"
#   ]

#   ## HTTP method
#   method = "GET"

#   ## Measurement name
#   name_override = "InsightHome_simulator"
#   data_format = "json"

[[inputs.http]]
  ## One or more URLs from which to read formatted metrics
  urls = ["http://192.168.11.11:8123/api/states"]

  ## HTTP method
  method = "GET"

  ## Optional: Add a custom header for authentication
  headers = { "Authorization" = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIyM2M3YzgxMGU4MTQ0M2NlOWJiNjIxZGI4MmMzOGVlZCIsImlhdCI6MTcyNzQ0Nzg1MCwiZXhwIjoyMDQyODA3ODUwfQ.1z4PlnyHX2vnFcIq4yhIdgBVd42LkqU3b-M9BKpEuiQ"}

  ## Measurement name
  name_override = "home_assistant"
  data_format = "json"

  ## Use json_query to extract specific data
  # json_query = ".[] | select(.entity_id | startswith(\"climate.\"))"

  ## Optional: Specify the tag keys to be extracted from the JSON
  tag_keys = ["entity_id"]

  ## Optional: Specify the field keys to be extracted from the JSON
  # field_keys = ["state", ".attributes.temperature", ".attributes.occupied_heating_setpoint", ".attributes.local_temperature"]  # Note the field "temperature" matches the extracted key from json_query

# # [[inputs.mqtt_consumer]]
# #   servers = ["tcp://127.0.0.1:1883"]
# #   topics = [
# #     "Outage",
# #     "Drift"
# #   ]
# #   topic_tag = ""
# #   name_override = "EnergyManagement"
# #   data_format = "json"
# #   json_query = "fields"

# Retrieve data from MODBUS slave devices
[[inputs.modbus]]
  ## Slave ID - addresses a device on the bus
  slave_id = 1

  ## Timeout for each request
  timeout = "1s"

  ## Frequency of polling
  period = "10s"

  ## Transmission Mode (RTU or TCP)
  transmission_mode = "TCP"

  ## IP Address and Port of the Modbus TCP device
  controller = "tcp://192.168.11.20:502"

  ## Measurement name for the data
  name = "eGauge_PP"

  input_registers = [
    { name = "P_Total de la maison(MEEB1/PSR)",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9000,9001]},
    { name = "L1 Voltage",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9002,9003]},
    { name = "L2 Voltage",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9004,9005]},
    { name = "SÃ©cheuse",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9008,9009]},
    { name = "Chauffage Garage",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9014,9015]},
    { name = "Chauffage Sous-sol sud",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9016,9017]},
    { name = "Chauffage sous-sol nord",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9046,9047]},
    { name = "Chauffage hall-SDB rdc-cuisine",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9018,9019]},
    { name = "Chauffage Salle a manger",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9020,9021]},
    { name = "Chauffage SDB 2",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9022,9023]},
    { name = "Chauffage chambre 2",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9024,9025]},
    { name = "Chauffage chambre 3",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9026,9027]},
    { name = "Chauffe-eau",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9028,9029]},
    { name = "CuisiniÃ¨re",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9030,9031]},
    { name = "Lave vaisselle",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9032,9033]},
    { name = "Laveuse",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9034,9035]},
    { name = "Ã©changeur d'air",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9036,9037]},
    { name = "Prise comptoir",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9038,9039]},
    { name = "Fournaise",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9040,9041]},
    { name = "Thermopompe",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9042,9043]},
    { name = "Radiant de cuisine",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9044,9045]},
    { name = "Borne vÃ©hicule",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9048,9049]},
  ]

[[inputs.modbus]]
  ## Slave ID - addresses a device on the bus
  slave_id = 1

  ## Timeout for each request
  timeout = "1s"

  ## Frequency of polling
  period = "10s"

  ## Transmission Mode (RTU or TCP)
  transmission_mode = "TCP"

  ## IP Address and Port of the Modbus TCP device
  controller = "tcp://192.168.11.23:502"

  ## Measurement name for the data
  name = "eGauge_PU"

  input_registers = [
    { name = "RÃ©frigÃ©rateur",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9024,9025]},
    { name = "Chauffage salon 1",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9014,9015]},
    { name = "Chauffage chambre 1",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9016,9017]},
  ]

# [[inputs.modbus]]
#   ## Slave ID - addresses a device on the bus
#   slave_id = 1

#   ## Timeout for each request
#   timeout = "1s"

#   ## Frequency of polling
#   period = "10s"

#   ## Transmission Mode (RTU or TCP)
#   transmission_mode = "TCP"

#   ## IP Address and Port of the Modbus TCP device
#   controller = "tcp://192.168.1.88:502"

#   ## Measurement name for the data
#   name = "eGauge_EV"

#   input_registers = [
#     { name = "Prise A (W)",  byte_order = "ABCD", data_type = "FLOAT32-IEEE",   scale=1.0,     address = [9000,9001]},
#   ]

[[inputs.modbus]]
  ## Slave ID - addresses a device on the bus
  slave_id = 10

  ## Timeout for each request
  timeout = "1s"

  ## Frequency of polling
  period = "10s"

  ## Transmission Mode (RTU or TCP)
  transmission_mode = "TCP"

  ## IP Address and Port of the Modbus TCP device
  controller = "tcp://192.168.11.159:503"

  ## Measurement name for the data
  name = "InsightHome_XW503"

  input_registers = [
    { name = "AC1 Power",  byte_order = "ABCD", data_type = "INT32",   scale=1.0,     address = [102,103]},
    { name = "AC Load Power",  byte_order = "ABCD", data_type = "INT32",   scale=1.0,     address = [154,155]},
  ]

[[inputs.modbus]]
  ## Slave ID - addresses a device on the bus
  slave_id = 1

  ## Timeout for each request
  timeout = "1s"

  ## Frequency of polling
  period = "10s"

  ## Transmission Mode (RTU or TCP)
  transmission_mode = "TCP"

  ## IP Address and Port of the Modbus TCP device
  controller = "tcp://192.168.11.159:503"

  ## Measurement name for the data
  name = "InsightHome_GW503"

  input_registers = [
    { name = "MPPT PV Power",  byte_order = "ABCD", data_type = "UINT32",   scale=1.0,     address = [144,145]},
    { name = "Battery Bank1 SOC",  byte_order = "ABCD", data_type = "UINT32",   scale=1.0,     address = [968,969]},
    { name = "Battery Bank1 Power",  byte_order = "ABCD", data_type = "INT32",   scale=1.0,     address = [966,967]},
    { name = "Battery Bank 1 Voltage",  byte_order = "ABCD", data_type = "UINT32",   scale=0.001,     address = [512,513]},
  ]

[[inputs.modbus]]
  ## Slave ID - addresses a device on the bus
  slave_id = 170

  ## Timeout for each request
  timeout = "1s"

  ## Frequency of polling
  period = "10s"

  ## Transmission Mode (RTU or TCP)
  transmission_mode = "TCP"

  ## IP Address and Port of the Modbus TCP device
  controller = "tcp://192.168.11.159:503"

  ## Measurement name for the data
  name = "InsightHome_MPPT503"

  input_registers = [
    { name = "PV Power",  byte_order = "ABCD", data_type = "UINT32",   scale=1.0,     address = [80,81]},
    { name = "PV Voltage",  byte_order = "ABCD", data_type = "UINT32",   scale=1.0,     address = [76,77]},
    { name = "DC Output Power",  byte_order = "ABCD", data_type = "UINT32",   scale=1.0,     address = [92,93]},
    { name = "DC Output Voltage",  byte_order = "ABCD", data_type = "INT32",   scale=1.0,     address = [88,89]},
  ]